1. 根视图为一个navigationViewController,上面是一个TabBarController

2. 每一个bar item所在页里面都嵌套一个table获取view的控制器

3. 静态Cells类型的table的style 要设置成group

4. 让navigationBar底部线条隐藏的方法
//自定义背景图和自定义shadow图
[self.navigationController.navigationBar setBackgroundImage:[[UIImage alloc] init] forBarMetrics:UIBarMetricsDefault];
[self.navigationController.navigationBar setShadowImage:[[UIImage alloc] init]];//用于去除导航栏的底线，也就是周围的边线

5. 自定义navBar返回按钮用的是UIBarButtonItem对象

6. 一个tab控制器嵌套一个nav控制器,nav控制器push一个视图的时候如果设置为hideBottomBarOnPush的话,效果就是微信那样.而nav控制器嵌套tab控制器,然后push一个视图的话,不需要设置hideBottomBarOnPush效果也是微信那样.不过后者的话一会所有页面的navigationBar都是同一个这样就很不方便,毕竟一般情况下,不同页面有着不同的navigationBar.

***************重大更新***********
7. 现在整体结构修改成了tab控制器嵌套nav控制器

8. 按照第7步修改之后,要设置tab里面每一个页面的标题,必须使用self.navigationItem.title = @"活石";而不是原来的self.tabBarController.title = @"活石";

9. CollectView 新增或者删除Cell的时候,系统会自动在指定位置添加cell,其他原有的cell不会重新加载

10. CollectViewCell 里面的label用特殊字体,导致在iOS8.4中Cell的加载速度异常慢,切换默认字体则正常.

11. 每一个collectionView 都必须独享一个UICollectionViewLayout对象,否则做插入操作会报EXC_BAD_ACCESS错误😩

12. collectionView可以设置allowsMultipleSelection,NO时,点击同一个cell只会触发didSelectItemAtIndexPath方法,点击其他cell则先触发上一次点击的cell的didDeSelectItemAtIndexPath,再触发当前点击cell的didSelectItemAtIndexPath.YES时,则点击不同的cell都触发didSelectItemAtIndexPath,点击同一个cell则轮流触发didSelectItemAtIndexPath和didDeSelectItemAtIndexPath

13. 一定要留意如果移除了一个cell,则在这个cell之后的所有cell对应的indxPath都会变化.所以如果在移除cell之前有记录了某个cell的位置,移除cell之后,这个cell的indexPath可能会发生变化,要特别注意.....

14. collectionViewCell.xib文件中对cell加入的任何元素,比如按钮,最终都无法响应任何事件.因为这些元素会被cell的contentView覆盖了.所以要把这些元素加到cell的contentView里面才行.有一个巧妙的方法,就是先在xib文件里面编辑好元素,然后等到元素要显示之前,用addSubView把他们重新添加到contentView里面就好

15. collectionViewCell嵌套collectionView,被嵌套的collectionView里面的cell里的按钮点击之后,按钮和collectionView的selected事件不会同时响应

16. 设置UIButton标题的时候,不能误用titleLabel.text属性去设置,因为不管你怎么设置,这个label的frame是0,0,0,0..所以应该使用官方提供的-setTitle:forState:方法......

17. 圣经页面的最终实现原理
    整体上是一个collectionView,数据源是这个界面上的UIViewController,然后UICollectionViewDelegate, UICollectionViewDelegateFlowLayout是collectionView(A)自身实现的(因为总共有2个collectionView),然后那个有详细章节的cell(detailCell),由UIViewController控制,detailCell里面又嵌套了一个collectionView(B),B的数据源detailCell,detailCell同时实现了UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout这三个协议,然后detailCell里面的章节cell(就是那些圆数字)里面是按钮,但是当你点击按钮的时候,并不会触发B的didSelectItemAtIndexPath,所以需要从章节cell里面再声明一个自定义代理然后由detailCell实现,按钮被点击时,通知detailCell,这样才能完整实现这个效果...........
    还有一个地方就是UIViewController要分配两个一样的数据(这里主要是每一本书的章节数量,我写死了50个)给A和detailCell,这样在A里面才能计算出detailCell的高度,然后detailCell里面才能计算出B的Cell的数量....

18 字典转json,比较麻烦.NSMutableDictionary *jsonDic = [[NSMutableDictionary alloc] init];NSData *jsonData = [NSJSONSerialization dataWithJSONObject:jsonDic options:0 error:nil];NSLog(@"%@",[[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding]);

19 iOS8中发现UITableViewCellSelectionStyle中除了默认效果和UITableViewCellSelectionStyleNone,其他效果设置后均无效.

20.tabBarController 下的item的selected状态下的图标必须用代码设置:
discoveryItem.selectedImage = [[UIImage imageNamed:@"DiscoverySelc"] imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];

21. tableview static 混合dynamic的方法,就是先设计好static cell,加载tableview时候会调用数据源,数据源中的cellForRowAtIndexPath方法是根据static cell来调用的,这时候可以针对特定的cell一定义,如果不想改变原来设计的static cell,则调用super方法并且作为返回值就可以

22.AFNetworking 3.0使用记录
AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
NSDictionary *requestContents = @{
    @"receipt-data": [receipt base64EncodedStringWithOptions:0]
};
- (nullable NSURLSessionDataTask *)GET:(NSString *)URLString
                            parameters:(nullable id)parameters
                              progress:(nullable void (^)(NSProgress *downloadProgress))downloadProgress
                               success:(nullable void (^)(NSURLSessionDataTask *task, id _Nullable responseObject))success
                               failure:(nullable void (^)(NSURLSessionDataTask * _Nullable task, NSError *error))failure;
	1).post带参数
	直接将参数放在parameters上
	2).提示不接收服务器的返回类型,例如不接受text/plain
	// manager.responseSerializer默认就是期望JSON类型的response:AFJSONResponseSerializer
	manager.responseSerializer.acceptableContentTypes = [NSSet setWithObject:@"text/plain"];
	3).设置Header
	manager.requestSerializer setAuthorizationHeaderFieldWithUsername:(nonnull NSString *) password:(nonnull NSString *)



23.在scrollview中设置的元素的高,顶,左右,居中约束后还提示scrollView约束有歧义,可以看到 Storyboard 错误提示：ScrollView has ambiguous scrollable content height。这是怎么一回事呢？
我们知道，UIScrollView 有一个 contentSize 属性，其定义了 ScrollView 可滚动内容的大小。在以前用纯代码写的时候，我们会直接对这个属性赋值，定义其大小。但在 Autolayout 下，UIScrollView 的 contentSize 是由其内容的约束来定义的。因此，我们在 ScrollView 里面设置的约束，不仅起到布局内容的作用，同时也起到了定义 ScrollView 可滚动范围的作用。
针对上面的例子具体来说，ScrollView 知道它里面有个 View，其高度是 200，距离顶上为 55，但仅通过这两个约束没办法知道它的 contentSize 的高度是多少，我们缺少一个定义 View 到 ScrollView 底部距离的约束。
参考:http://www.cocoachina.com/ios/20141118/10242.html

24. 针对不同机型,如果需要设置scorllView和contentSize差不多大,需要在代码用对约束进行调整.比如确定元素底部离scorllView底部的实际距离,然后再赋值给约束.

25. 视图设置了约束后,如果要让视图执行动画的同时,约束也能跟着执行动画,那么需要这样做:
先改变约束self.upConstraint.constant = 10;
然后再执行动画
[UIView animateWithDuration:3 animations:^{
    [self.view layoutIfNeeded];
}];
需要注意的是,视图移动的同时,视图内的子视图约束如果设置对了也会跟着移动.比如子视图设置了bottom,centerX,这样就可以移动了.


26.一个安全的post,get 的api设计方法
将所有的参数还有时间搓进行某种排序,然后加上本地密钥做一个md5,再放在请求的sign参数中发给服务器,这样服务器可以通过验证sign是否合法来确定这次请求是否合法.
例如要请求的参数是timestamp=1462501827&phone=13129285435&password=95d47be0d380a7cd3bb5bbe78e8bed49
然后,将参数按照ascii顺序排列,就是password=95d47be0d380a7cd3bb5bbe78e8bed49&phone=13129285435&timestamp=1462501827+密钥,然后再做一个sha256编码,把结果放在sign里面,变成timestamp=1462501827&phone=13129285435&password=95d47be0d380a7cd3bb5bbe78e8bed49&sign=****

27.http请求头不一定有Content-Length,如果被设置成了Transfer-Encoding为chunked的话,就是分块传输了.
参考:https://zh.wikipedia.org/wiki/分块传输编码

28.网络服务层的架构设计,采用工厂模式,所有子服务都从LSServiceCenter中产生.这里要区别于策略模式,LSServiceCenter产生的的服务都是具体的子服务.
子服务都继承自LSServiceBase.LSServiceBase提供基础的网络服务功能,同时包含了参数签名等.

29.对象属性中有NSTimer对象,导致对象无法被释放的可能原因
使用了NSTimer定时器同时开启了repeats重复执行时,将target设置为self(也就是对象本身,简称A对象).这时候A对象的引用计数被定时器+1了.导致无法释放,唯一要释放的方法就是调用定时器的invalidate方法.
如果如果是在定时器初始化的地方使用了Block去捕获定时器对象,则需要等到块被释放了.定时器才会被释放,A对象才会被释放,所以不推荐在Block中捕获定时器.

30. 物理网络链接错误,由ServiceBase处理错误,同时调用ServiceBase的delegate<LSServiceBaseProtocol>中的serviceConnectFail方法.
注意,如果子类和父类用同名属性,需要在子类实现的地方对属性加上"@dynamic 属性名".

31. iOS中的NSDate时区问题.如果是通过字符串生成NSDate的,默认字符串就是参照设备时区再转换的.得到的NSdate可以看成是一个记录了时间戳的对象,如果要从NSDate里面获取到实际的年月日,一种是打印成字符串的,则需要使用descriptionWithLocale:,明确选择一个时区再打印,否则就是显示默认的Greenwich Mean Time (GMT)了.另一种是要获取到年月日的,可以使用日历对象.[NSCalendar currentCalendar],这个实例化出来的就是一个本地日历了.不需要再设置成本地时区了.然后结合- (NSDateComponents *)components:(NSCalendarUnit)unitFlags fromDate:(NSDate *)date方法,就可以获取到一个完整的日期组件对象了.

32. 时间统计部分,在阅读界面监听了UIApplicationWillResignActiveNotification这个事件,但是每次用户锁屏(或者回到桌面)时,系统会先触发AppDelegate类里面的applicationWillResignActive方法,而我刚好在这里做了一个upload的请求.所以说,用户在阅读界面第一次锁屏时,程序先发起upload请求,再执行stop.所以upload实际上是被忽略的.等用户打开屏幕时,程序调用start,接着用户第二次锁屏时,这个时候程序也是先upload,再stop,但是第二次的upload就不会被忽略了,因为在此之前已经有了一个完整的start,stop了,所以upload会被框架接受.

33. 让按钮显示多行字的方法:首先Line Break 设置成word wrap,然后要换行的地方用command + enter

34. 无论是tableview cell 还是collectionview cell,如果要自定义cell,都需要把视图加到contentview上..在interface界面上编辑的时候,要从对象库面板从拉出一个cell的视图,不要用xib自己生成的那个view,因为那个只是普通的view,会缺少很多属性,会要命的是会缺少一个contentView,导致无法直接在界面文件上编辑 ......

35. 在xcode左边的视图导航栏上下拖动子视图的位置可以改变子视图的层级....这样写约束的时候才比较规整(好像跟写约束没任何关系.....)

36.在活石tab上使用textView,发现启动速度没有Label快.

37.在storyBoard中设计控制器的导航栏按钮时,需要先放一个Navigation Item上去,然后才可以在导航栏地方上摆放BarButtonItem

38.Navagation Bar可以设置标题颜色和上面的item的颜色.
设置标题颜色,需要设置Title Color.
设置所有item颜色则需要设置View Tint属性,设置的item颜色会在push一个视图后,变成新视图的Bar Button item的默认颜色.
如果要设置整个Bar的背景颜色,需要设置Bar Tint属性.

下面总结一下用代码设置导航栏相关颜色和按钮的方法.
(1)设置导航栏标题颜色self.navigationController.navigationBar.titleTextAttributes = [NSDictionary dictionaryWithObjectsAndKeys:
                                           [UIColor whiteColor],
                                           UITextAttributeTextColor];

(2)设置导航栏背景颜色self.navigationController.navigationBar.barTintColor
(3)设置导航栏上面的bar button items文字颜色self.navigationController.navigationBar.tintColor;单独对item进行设置则是self.navigationItem.leftBarButtonItem.tintColor
(4)设置导航栏上的按钮,需要设置self.navigationItem属性.
* 注意,navigationController.navigationBar在viewDidLoad是nil,只有在控制器触发viewWillAppear方法后才有值

39. 代码写宽度约束是这样的
[self.userContactInfoView addConstraint:[NSLayoutConstraint constraintWithItem:self.userContactInfoView attribute:NSLayoutAttributeHeight relatedBy:NSLayoutRelationEqual toItem:nil attribute:NSLayoutAttributeNotAnAttribute multiplier:1 constant:100]];

40. 从xib文件中加载出来的视图初始化方法是initWithCoder:(NSCoder *)aDecoder

41. 如何自定义控件?

42. 子类化UIImageView的时候需要注意,开发文档中说明了UIImageView 并不是通过drawRect:方法渲染的,所以子类里重载这个方法是没有任何作用的.

43. 如果需要把图层的内容绘制到Frame之外,则必须将view.clipsToBounds设置成NO

44. 使用系统提供的tableView cell动态高度,需要设置self.tableView.estimatedRowHeight和self.tableView.rowHeight = UITableViewAutomaticDimension

45. 为tableview添加toolBar的方法,如果是用了push他的navigationController,则直接在tableView控制器didload后设置[self.navigationController setToolbarHidden:NO];即可.注意消失前把它设置成隐藏的...

46. 自定义toolbar上的UIBarButtonItem.思路就是先做一个UIButton,可以添加图片文字,可以用EdgeInsets属性设置图片文字的偏移,然后使用- (instancetype)initWithCustomView:(UIView *)customView方法把按钮转成UIBarButtonItem,再把item以数组的形式加到 toolbarItems 就可以了.加到toolbar的item会自动有左右空隙,系统会自动摆放item到toolbar的y轴居中位置,只需要设置UIButton的width和height就可以了,点击事件也需要在UIButton上面加.

47. 如果sotryboard 里面放的是navigationController,而且也是直接在navigationController上指定一个自定义类(比如叫MynavigationController)的时候,navigationController的rootViewController上面添加的按钮(包括导航栏的item)就无法从sotryboard关联按钮的点击事件到MynavigationController.m里,拖线的时候xcode不让放.所以最好就是把自定义的类弄成UIViewController的子类,然后就可以给navigationController的rootController设置上

48.在tab控制器里面加一个item页是nav控制器，然后这个nav里push了几个页面，在最后的页面模态一个新的nav控制器，然后关闭模态后，返回页面时有异常，提示动画begin end有问题.原因就是tab控制器里重写了appear,disappear方法但是没有调用父类方法....

49. UITextView本身并不支持placeholder,所以需要自定义一个视图.原理就是自定义一个label加载TextView上,在有文字的时候隐藏TextView上面的label,没有文字的时候显示label.

50. 自定义的视图也支持在xib,Storyboard中预览.参考https://onevcat.com/2014/10/ib-customize-view/

51. 设置中开启位置信息闪退.因为NSLocationWhenInUseUsageDescription值为Bool类型，把类型改成String就可以了,同时添加的内容可以在设置位置信息时显示出来

52. 去除tablevView中多余的分割线的办法,就是在cell中自定义分割线,然后加入到距离cell底部6个点的地方..

53. 　　祷告勇士: 含蕊、亦玉、靖荷、碧萱、寒云、向南、书雁、怀薇、思菱、忆文、翠巧、怀山、若山、向秋、凡白、绮烟、从蕾、天曼、又亦、依琴、曼彤、沛槐、又槐

53. 如果在tablview还没显示好的时候就加载hud到 tableview上,则hud会被tableview上的线条啊,hearder view等覆盖了.解决方法就是在viewDidAppear:(BOOL)animated方法里面添加hud.或者在didload方法中延迟0.5s加载就完美解决了

54. 点赞互交设计:点赞的时候,指明是赞还是取消,然后交给后台去完成请求.UI默认点赞操作是成功的并且立即响应.

55. 模态显示一个控制器,让控制器的视图可以透明时显示模态前的界面.方法就是vc.modalPresentationStyle = UIModalPresentationOverCurrentContext;

56. 简单方便地为实现异步操作扩展出同步操作的方法,即使用CGD中的信号量函数
//创建一个semaphore
dispatch_semaphore_t sema = dispatch_semaphore_create(0);
//发送一个信号
dispatch_semaphore_signal(sema);
//等待信号 
dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);

57. 使用MJExtension,遇到模型转字典时,如果字典有数组的,建议把数组先转成json字符串,然后再存回字典,这样在对字典里的内容做参数签名时才不容易出错;否则可能会出现参数签名跟实际上post的内容不一致从而导致签名错误.

58. 在AFNetworking中无法使用信号量实现同步操作.使用信号量到了wait部分,主线程进入等待状态,所以网络数据接受到后也无法再通过主线程进入回调.所以无法触发回调中的释放信号量方法,导致程序永久卡死.



